# -*- coding: utf-8 -*-
"""HOTELUNAZUL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H7xN6IlyMdWiPpkT9F0XbonYYDdyweUj
"""

import csv
import os
import pandas as pd
from datetime import datetime, timedelta

# Validaciones
def validar_nombre(texto):
    return len(texto) >= 3 and texto.isalpha()

def validar_apellido(texto):
    return len(texto) >= 3 and texto.isalpha()

def validar_documento(doc):
    return doc.isdigit() and 3 <= len(doc) <= 15

def validar_correo(correo):
    return "@" in correo and "." in correo.split("@")[-1]

def validar_telefono(tel):
    return tel.isdigit() and 7 <= len(tel) <= 15

from google.colab import drive
drive.mount('/content/drive')

def guardar_huesped(nombre, apellido, documento, correo, telefono):
    archivo_nuevo = not os.path.exists("huespedes.csv")
    with open("huespedes.csv", mode="a", newline="") as archivo:
        escritor = csv.writer(archivo)
        if archivo_nuevo:
            escritor.writerow(["Nombre", "Apellido", "Documento", "Correo", "Telefono"])
        escritor.writerow([nombre, apellido, documento, correo, telefono])

def registrar_huesped():
    nombre = input("Ingrese el nombre del huésped: ")
    apellido = input("Ingrese el apellido del huésped: ")
    documento = input("Ingrese el documento del huésped: ")
    correo = input("Ingrese el correo electrónico del huésped: ")
    telefono = input("Ingrese el teléfono del huésped: ")

    errores = []

    if not validar_nombre(nombre):
        errores.append("Nombre inválido: mínimo 3 letras y solo letras.")
    if not validar_apellido(apellido):
        errores.append("Apellido inválido: mínimo 3 letras y solo letras.")
    if not validar_documento(documento):
        errores.append("Documento inválido: entre 3 y 15 dígitos.")
    if not validar_correo(correo):
        errores.append("Correo inválido.")
    if not validar_telefono(telefono):
        errores.append("Teléfono inválido: entre 7 y 15 dígitos.")

    if errores:
        print("\nSe encontraron errores:")
        for e in errores:
            print("-", e)
    else:
        guardar_huesped(nombre, apellido, documento, correo, telefono)
        print("\n Registro exitoso.")

registrar_huesped()

def huesped_registrado(documento):
    try:
        df = pd.read_csv("huespedes.csv")
        return documento in df["Documento"].astype(str).values
    except FileNotFoundError:
        return False

def obtener_habitaciones_disponibles(tipo):
    try:
        df = pd.read_csv("reservas.csv")
        habitaciones_ocupadas = df["NumeroHabitacion"].astype(int).tolist()
    except (FileNotFoundError, KeyError):
        habitaciones_ocupadas = []

    if tipo == "estandar":
        todas = list(range(1, 31))
    elif tipo == "suite":
        todas = list(range(31, 41))
    else:
        return []

    disponibles = [h for h in todas if h not in habitaciones_ocupadas]
    return disponibles

def realizar_reserva():
    print("\n REALIZAR RESERVA ")
    documento = input("Ingrese el documento del huésped: ")

    if not huesped_registrado(documento):
        print(" El huésped no está registrado.")
        return

    tipo = input("Tipo de habitación (estandar / suite): ").lower()
    if tipo not in ["estandar", "suite"]:
        print(" Tipo de habitación no válido.")
        return

    disponibles = obtener_habitaciones_disponibles(tipo)
    if not disponibles:
        print(f" No hay habitaciones {tipo} disponibles.")
        return

    print("Habitaciones disponibles:", disponibles)
    numero_hab = disponibles[0]

    fecha_ingreso_str = input("Ingrese la fecha de ingreso (AAAA-MM-DD): ")
    try:
        fecha_ingreso = datetime.strptime(fecha_ingreso_str, "%Y-%m-%d")
    except ValueError:
        print(" Formato de fecha inválido.")
        return

    try:
        noches = int(input("Ingrese el número de noches: "))
        if noches <= 0:
            raise ValueError
    except ValueError:
        print(" Número de noches inválido.")
        return

    fecha_salida = fecha_ingreso + timedelta(days=noches)
    costo_noche = 120000 if tipo == "estandar" else 250000
    total = costo_noche * noches

    print("\n RESERVA CONFIRMADA")
    print(f"Huésped: {documento}")
    print(f"Tipo: {tipo}")
    print(f"Habitación: {numero_hab}")
    print(f"Ingreso: {fecha_ingreso.date()} - Salida: {fecha_salida.date()}")
    print(f"Noches: {noches}")
    print(f"Total: ${total:,}")

    archivo_nuevo = not os.path.exists("reservas.csv")
    with open("reservas.csv", mode="a", newline="") as archivo:
        writer = csv.writer(archivo)
        if archivo_nuevo:
            writer.writerow(["Documento", "Tipo", "NumeroHabitacion", "FechaIngreso", "FechaSalida", "Noches", "Total"])
        writer.writerow([documento, tipo, numero_hab, fecha_ingreso.date(), fecha_salida.date(), noches, total])

realizar_reserva()

#realizar la check-out

def registrar_salida():
    print("\n REGISTRAR SALIDA ")
    documento = input("Ingrese el documento del huésped: ")

    try:
        df_reservas = pd.read_csv("reservas.csv")
        df_huespedes = pd.read_csv("huespedes.csv")
    except FileNotFoundError:
        print(" No hay registros para buscar.")
        return

    # Buscar reserva por documento
    reservas = df_reservas[df_reservas["Documento"].astype(str) == documento]

    if reservas.empty:
        print(" No se encontró ninguna reserva activa para ese documento.")
        return

    # Tomar la primera reserva encontrada (suponemos una sola)
    reserva = reservas.iloc[0]
    tipo = reserva["Tipo"]
    habitacion = reserva["NumeroHabitacion"]
    fecha_ingreso = reserva["FechaIngreso"]
    fecha_salida = reserva["FechaSalida"]
    noches = reserva["Noches"]
    total = reserva["Total"]

    # Buscar nombre del huésped en huespedes.csv
    huesped = df_huespedes[df_huespedes["Documento"].astype(str) == documento]
    if huesped.empty:
        print(" Huésped no encontrado en archivo de huéspedes.")
        nombre = "Desconocido"
    else:
        nombre = huesped.iloc[0]["Nombre"] + " " + huesped.iloc[0]["Apellido"]

    # factura
    print("\n----- FACTURA DE HOSPEDAJE -----")
    print(f"Huésped: {nombre}")
    print(f"Documento: {documento}")
    print(f"Tipo de habitación: {tipo}")
    print(f"Número de habitación: {habitacion}")
    print(f"Fecha de ingreso: {fecha_ingreso}")
    print(f"Fecha de salida: {fecha_salida}")
    print(f"Noches: {noches}")
    print(f"Total a pagar: ${int(total):,}")

    confirmar = input("\n¿Confirmar salida y liberar habitación? (si/no): ").lower()
    if confirmar == "si":
        # Eliminar la reserva de reservas.csv
        df_reservas = df_reservas[df_reservas["Documento"].astype(str) != documento]
        df_reservas.to_csv("reservas.csv", index=False)
        print(" Reserva eliminada. Habitación liberada.")
    else:
        print("Operación cancelada.")

registrar_salida()

def mostrar_huespedes():
    try:
        df = pd.read_csv("huespedes.csv")
        print("\n--- HUÉSPEDES REGISTRADOS ---")
        print(df.to_string(index=False))
    except FileNotFoundError:
        print(" No hay huéspedes registrados aún.")

def mostrar_reservas():
    try:
        df = pd.read_csv("reservas.csv")
        print("\n--- RESERVAS ACTIVAS ---")
        print(df.to_string(index=False))
    except FileNotFoundError:
        print(" No hay reservas registradas aún.")

def buscar_reserva_por_documento():
    documento = input("Ingrese el documento a buscar: ")
    try:
        df = pd.read_csv("reservas.csv")
        resultado = df[df["Documento"].astype(str) == documento]
        if resultado.empty:
            print(" No se encontró ninguna reserva con ese documento.")
        else:
            print("\n--- RESERVAS ENCONTRADAS ---")
            print(resultado.to_string(index=False))
    except FileNotFoundError:
        print(" No hay reservas registradas aún.")

def reportes_administrador():
    print("\n REPORTES \n")
    try:
        df_huespedes = pd.read_csv("huespedes.csv")
        df_reservas = pd.read_csv("reservas.csv")
    except FileNotFoundError:
        print(" Archivos de datos no encontrados.")
        return

    # 1. Total de huéspedes registrados
    total_huespedes = len(df_huespedes)

    # 2. Total de habitaciones ocupadas actualmente
    habitaciones_ocupadas = df_reservas["NumeroHabitacion"].nunique()

    # 3. Total de habitaciones disponibles (hay 40 en total: 1-30 estándar, 31-40 suite)
    total_habitaciones = 40
    habitaciones_disponibles = total_habitaciones - habitaciones_ocupadas

    # 4. Total de ingresos generados
    ingresos_totales = df_reservas["Total"].sum()

    # 5. Tiempo promedio de estancia por huésped (en noches)
    promedio_noches = df_reservas.groupby("Documento")["Noches"].sum().mean()

    # 6. Lista de huéspedes con historial de reservas
    documentos_con_reserva = df_reservas["Documento"].unique().astype(str)
    historial = df_huespedes[df_huespedes["Documento"].astype(str).isin(documentos_con_reserva)]

    # 7. Huésped con más noches hospedadas
    suma_noches = df_reservas.groupby("Documento")["Noches"].sum()
    doc_mas_noches = suma_noches.idxmax()
    max_noches = suma_noches.max()
    nombre_max = df_huespedes[df_huespedes["Documento"].astype(str) == str(doc_mas_noches)][["Nombre", "Apellido"]].iloc[0].to_list()
    nombre_max = " ".join(nombre_max)

    # 8. Huésped con menos noches hospedadas
    doc_menos_noches = suma_noches.idxmin()
    min_noches = suma_noches.min()
    nombre_min = df_huespedes[df_huespedes["Documento"].astype(str) == str(doc_menos_noches)][["Nombre", "Apellido"]].iloc[0].to_list()
    nombre_min = " ".join(nombre_min)

    # Mostrar todos los reportes
    print(f" Total de huéspedes registrados: {total_huespedes}")
    print(f" Total de habitaciones ocupadas: {habitaciones_ocupadas}")
    print(f" Total de habitaciones disponibles: {habitaciones_disponibles}")
    print(f" Total de ingresos generados: ${ingresos_totales:,}")
    print(f" Tiempo promedio de estancia por huésped: {promedio_noches:.2f} noches")
    print("\n Lista de huéspedes con historial de reservas:")
    print(historial[["Nombre", "Apellido", "Documento"]].to_string(index=False))

    print(f"\n Huésped con más noches: {nombre_max} ({max_noches} noches)")
    print(f" Huésped con menos noches: {nombre_min} ({min_noches} noches)")

def menu_administrador():
    clave = input(" Ingrese la contraseña del administrador: ")
    if clave != "hotel890":
        print(" Contraseña incorrecta. Acceso denegado.")
        return

    while True:
        print("\n MENÚ DEL ADMINISTRADOR ")
        print("1. Ver huéspedes registrados")
        print("2. Ver reservas activas")
        print("3. Buscar reserva por documento")
        print("4. Ver reportes generales")
        print("5. Volver al menú principal")

        opcion = input("Seleccione una opción (1-5): ")

        if opcion == "1":
            mostrar_huespedes()
        elif opcion == "2":
            mostrar_reservas()
        elif opcion == "3":
            buscar_reserva_por_documento()
        elif opcion == "4":
            reportes_administrador()
        elif opcion == "5":
            break
        else:
            print(" Opción inválida.")

menu_administrador()

def menu():
    while True:
        print("\n HOTEL BUENDESCANSO ")
        print("1. Registrar huésped")
        print("2. Realizar reserva")
        print("3. Registrar salida (check-out)")
        print("4. Administrador")
        print("5. Salir")

        opcion = input("Seleccione una opción (1-5): ")

        if opcion == "1":
            registrar_huesped()
        elif opcion == "2":
            realizar_reserva()
        elif opcion == "3":
            registrar_salida()
        elif opcion == "4":
            menu_administrador()
        elif opcion == "5":
            print(" ¡sistema hotel buendescanso!")
            break
        else:
            print(" Opción inválida. Intente de nuevo.")

menu()

import pandas as pd
import matplotlib.pyplot as plt

def grafica_barras_tipo_habitacion():
    try:
        df = pd.read_csv("reservas.csv")
        conteo = df["Tipo"].value_counts()
        plt.figure(figsize=(6,4))
        conteo.plot(kind="bar", color=["skyblue", "lightgreen"])
        plt.title("Habitaciones Ocupadas por Tipo")
        plt.xlabel("Tipo de Habitación")
        plt.ylabel("Cantidad")
        plt.grid(axis="y")
        plt.show()
    except:
        print("Error al generar la gráfica.")

grafica_barras_tipo_habitacion()

def grafica_pie_ocupadas_vs_disponibles():
    try:
        df = pd.read_csv("reservas.csv")
        ocupadas = df["NumeroHabitacion"].nunique()
        total = 40
        disponibles = total - ocupadas
        plt.figure(figsize=(5,5))
        plt.pie([ocupadas, disponibles], labels=["Ocupadas", "Disponibles"],
                colors=["red", "green"], autopct="%1.1f%%", startangle=90)
        plt.title("Distribución Ocupadas vs Disponibles")
        plt.axis("equal")
        plt.show()
    except:
        print("Error al generar la gráfica.")

grafica_pie_ocupadas_vs_disponibles()

def grafica_lineas_checkouts_por_dia():
    try:
        df = pd.read_csv("reservas.csv")
        fechas = pd.to_datetime(df["FechaSalida"])
        conteo = fechas.value_counts().sort_index()
        plt.figure(figsize=(8,4))
        plt.plot(conteo.index, conteo.values, marker='o')
        plt.title("Check-Outs por Día")
        plt.xlabel("Fecha")
        plt.ylabel("Cantidad de Check-Outs")
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()
    except:
        print("Error al generar la gráfica.")

grafica_lineas_checkouts_por_dia()

def grafica_barras_horizontal_noches_top10():
    try:
        df = pd.read_csv("reservas.csv")
        top10 = df.groupby("Documento")["Noches"].sum().sort_values(ascending=False).head(10)
        plt.figure(figsize=(8,5))
        top10.plot(kind="barh", color="skyblue")
        plt.title("Top 10 Huéspedes con más Noches")
        plt.xlabel("Noches")
        plt.ylabel("Documento")
        plt.grid(axis="x")
        plt.tight_layout()
        plt.show()
    except:
        print("Error al generar la gráfica.")

grafica_barras_horizontal_noches_top10()

def grafica_dispersion_noches_vs_total():
    try:
        df = pd.read_csv("reservas.csv")
        resumen = df.groupby("Documento")[["Noches", "Total"]].sum()
        plt.figure(figsize=(6,4))
        plt.scatter(resumen["Noches"], resumen["Total"], color="purple")
        plt.title("Relación: Noches vs Total Pagado")
        plt.xlabel("Noches")
        plt.ylabel("Total Pagado ($)")
        plt.grid(True)
        plt.show()
    except:
        print("Error al generar la gráfica.")

grafica_dispersion_noches_vs_total()

def grafica_pastel_ingresos_por_tipo():
    try:
        df = pd.read_csv("reservas.csv")
        ingresos = df.groupby("Tipo")["Total"].sum()
        plt.figure(figsize=(5,5))
        plt.pie(ingresos, labels=ingresos.index, autopct="%1.1f%%", startangle=90,
                colors=["gold", "lightcoral"])
        plt.title("Porcentaje de Ingresos por Tipo de Habitación")
        plt.axis("equal")
        plt.show()
    except:
        print("Error al generar la gráfica.")

grafica_pastel_ingresos_por_tipo()

def grafica_histograma_noches():
    try:
        df = pd.read_csv("reservas.csv")
        noches = df["Noches"]
        plt.figure(figsize=(6,4))
        plt.hist(noches, bins=range(1, noches.max()+2), edgecolor="black")
        plt.title("Distribución de la Duración de las Estancias")
        plt.xlabel("Noches")
        plt.ylabel("Cantidad de Huéspedes")
        plt.grid(True)
        plt.show()
    except:
        print("Error al generar la gráfica.")

grafica_histograma_noches()

def grafica_combinada_ingresos_y_checkouts():
    try:
        df = pd.read_csv("reservas.csv")
        df["FechaSalida"] = pd.to_datetime(df["FechaSalida"])
        resumen = df.groupby("FechaSalida").agg({"Total": "sum", "Documento": "count"}).rename(columns={"Documento": "Checkouts"})
        fig, ax1 = plt.subplots(figsize=(8,4))

        ax1.bar(resumen.index, resumen["Total"], color="lightblue", label="Ingresos diarios")
        ax1.set_ylabel("Ingresos ($)", color="blue")
        ax1.tick_params(axis="y", labelcolor="blue")

        ax2 = ax1.twinx()
        ax2.plot(resumen.index, resumen["Checkouts"], color="red", marker="o", label="Check-Outs")
        ax2.set_ylabel("Cantidad de Huéspedes", color="red")
        ax2.tick_params(axis="y", labelcolor="red")

        plt.title("Ingresos y Check-Outs por Día")
        fig.autofmt_xdate()
        plt.grid(True)
        plt.tight_layout()
        plt.show()
    except:
        print("Error al generar la gráfica combinada.")

grafica_combinada_ingresos_y_checkouts()